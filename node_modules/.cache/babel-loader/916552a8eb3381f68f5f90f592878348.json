{"ast":null,"code":"import { patientConstants } from '../_constants';\nimport { patientService } from '../_services';\nimport { alertActions } from './alert.action';\nimport { history } from '../_helpers';\nexport const patientActions = {\n  login,\n  logout,\n  register,\n  getAll,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  return dispatch => {\n    dispatch(request({\n      username\n    }));\n    patientService.login(username, password).then(user => {\n      dispatch(success(user));\n      history.push('/');\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: patientConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: patientConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: patientConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  patientService.logout();\n  return {\n    type: patientConstants.LOGOUT\n  };\n}\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    patientService.register(user).then(user => {\n      dispatch(success());\n      history.push('/login');\n      dispatch(alertActions.success('Registration successful'));\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: patientConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: patientConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: patientConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getAll() {\n  return dispatch => {\n    dispatch(request());\n    patientService.getAll().then(users => dispatch(success(users)), error => dispatch(failure(error.toString())));\n  };\n\n  function request() {\n    return {\n      type: patientConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: patientConstants.GETALL_SUCCESS,\n      users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: patientConstants.GETALL_FAILURE,\n      error\n    };\n  }\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  return dispatch => {\n    dispatch(request(id));\n    patientService.delete(id).then(user => dispatch(success(id)), error => dispatch(failure(id, error.toString())));\n  };\n\n  function request(id) {\n    return {\n      type: patientConstants.DELETE_REQUEST,\n      id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: patientConstants.DELETE_SUCCESS,\n      id\n    };\n  }\n\n  function failure(id, error) {\n    return {\n      type: patientConstants.DELETE_FAILURE,\n      id,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/home/eke/patient-eth/src/_actions/patient.action.js"],"names":["patientConstants","patientService","alertActions","history","patientActions","login","logout","register","getAll","delete","_delete","username","password","dispatch","request","then","user","success","push","error","failure","toString","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","users","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","id","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"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","sourcesContent":["import { patientConstants } from '../_constants';\nimport { patientService } from '../_services';\nimport { alertActions } from './alert.action';\nimport { history } from '../_helpers';\n\nexport const patientActions = {\n    login,\n    logout,\n    register,\n    getAll,\n    delete: _delete\n};\n\nfunction login(username, password) {\n    return dispatch => {\n        dispatch(request({ username }));\n\n        patientService.login(username, password)\n            .then(\n                user => { \n                    dispatch(success(user));\n                    history.push('/');\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: patientConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: patientConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: patientConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n    patientService.logout();\n    return { type: patientConstants.LOGOUT };\n}\n\nfunction register(user) {\n    return dispatch => {\n        dispatch(request(user));\n\n        patientService.register(user)\n            .then(\n                user => { \n                    dispatch(success());\n                    history.push('/login');\n                    dispatch(alertActions.success('Registration successful'));\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: patientConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: patientConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: patientConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getAll() {\n    return dispatch => {\n        dispatch(request());\n\n        patientService.getAll()\n            .then(\n                users => dispatch(success(users)),\n                error => dispatch(failure(error.toString()))\n            );\n    };\n\n    function request() { return { type: patientConstants.GETALL_REQUEST } }\n    function success(users) { return { type: patientConstants.GETALL_SUCCESS, users } }\n    function failure(error) { return { type: patientConstants.GETALL_FAILURE, error } }\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n    return dispatch => {\n        dispatch(request(id));\n\n        patientService.delete(id)\n            .then(\n                user => dispatch(success(id)),\n                error => dispatch(failure(id, error.toString()))\n            );\n    };\n\n    function request(id) { return { type: patientConstants.DELETE_REQUEST, id } }\n    function success(id) { return { type: patientConstants.DELETE_SUCCESS, id } }\n    function failure(id, error) { return { type: patientConstants.DELETE_FAILURE, id, error } }\n}"]},"metadata":{},"sourceType":"module"}