{"ast":null,"code":"import { useState } from 'react';\n\nconst useForm = (callback, initialState, validate) => {\n  const [values, setValues] = useState(initialState); // new state for errors\n  // function that validates these errors\n  // pass these errors back to form\n\n  const [errors, setErrors] = useState(initialState);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    console.log(name + ':' + value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault(); //handling errors\n\n    setErrors(validate(values));\n    callback();\n  };\n\n  return {\n    handleSubmit,\n    handleChange,\n    values,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/eke/patient-eth/src/useForm.js"],"names":["useState","useForm","callback","initialState","validate","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","event","name","value","target","console","log","handleSubmit","preventDefault"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AAGA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAUC,YAAV,EAAuBC,QAAvB,KAAoC;AAClD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAACG,YAAD,CAApC,CADkD,CAElD;AACA;AACA;;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAACG,YAAD,CAApC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;;AAGA,QAAMW,YAAY,GAAGC,KAAK,IAAI;AAC5B,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,KAAK,CAACG,MAA5B;AACAT,IAAAA,SAAS,CACT,EAAC,GAAGD,MAAJ;AACC,OAACQ,IAAD,GAASC;AADV,KADS,CAAT;AAIAE,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,GAAC,GAAL,GAASC,KAArB;AACD,GAPD;;AAUA,QAAMI,YAAY,GAAGN,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACO,cAAN,GAD4B,CAE5B;;AACAX,IAAAA,SAAS,CAACJ,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAH,IAAAA,QAAQ;AACT,GALD;;AAOA,SAAO;AACLgB,IAAAA,YADK;AAELP,IAAAA,YAFK;AAGLN,IAAAA,MAHK;AAILE,IAAAA;AAJK,GAAP;AAMD,CAhCD;;AAiCA,eAAeN,OAAf","sourcesContent":["import {useState} from 'react';\n\n\nconst useForm = (callback,initialState,validate) => {\n  const [values, setValues] = useState(initialState);\n  // new state for errors\n  // function that validates these errors\n  // pass these errors back to form\n  const [errors, setErrors] = useState(initialState);\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n\n  const handleChange = event => {\n    const {name, value} = event.target;\n    setValues(\n    {...values,\n     [name] : value\n    });\n    console.log(name+':'+value)\n  }\n  \n  \n  const handleSubmit = event => {\n    event.preventDefault();\n    //handling errors\n    setErrors(validate(values))\n    callback();\n  };\n\n  return {\n    handleSubmit,\n    handleChange,\n    values,\n    errors\n  };\n}\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}