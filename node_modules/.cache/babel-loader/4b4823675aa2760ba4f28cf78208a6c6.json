{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useForm = (callback, initialState, validate) => {\n  const [values, setValues] = useState(initialState); // new state for errors\n  // function that validates these errors\n  // pass these errors back to form\n\n  const [errors, setErrors] = useState(initialState);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setValues({ ...values,\n      [name]: value\n    }); // console.log(name+':'+value)\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault(); //handling errors\n\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    // callback function will happen whenever smt. in our changes\n    // check the see if there are no errors\n    // call our callback\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [// observer: you can only change when X changes\n  errors]);\n  return {\n    handleSubmit,\n    handleChange,\n    values,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/eke/patient-eth/src/useForm.js"],"names":["useState","useEffect","useForm","callback","initialState","validate","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","event","name","value","target","handleSubmit","preventDefault","Object","keys","length"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAGA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAUC,YAAV,EAAuBC,QAAvB,KAAoC;AAClD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACI,YAAD,CAApC,CADkD,CAElD;AACA;AACA;;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAACI,YAAD,CAApC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;;AAGA,QAAMY,YAAY,GAAGC,KAAK,IAAI;AAC5B,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,KAAK,CAACG,MAA5B;AACAT,IAAAA,SAAS,CACT,EAAC,GAAGD,MAAJ;AACC,OAACQ,IAAD,GAASC;AADV,KADS,CAAT,CAF4B,CAM5B;AACD,GAPD;;AAUA,QAAME,YAAY,GAAGJ,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACK,cAAN,GAD4B,CAE5B;;AACAT,IAAAA,SAAS,CAACJ,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAK,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GALD;;AAOAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA,QAAGkB,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,MAApB,KAA+B,CAA/B,IAAoCX,YAAvC,EAAoD;AAClDP,MAAAA,QAAQ;AACT;AACF,GAPQ,EAQT,CAAE;AACAK,EAAAA,MADF,CARS,CAAT;AAYA,SAAO;AACLS,IAAAA,YADK;AAELL,IAAAA,YAFK;AAGLN,IAAAA,MAHK;AAILE,IAAAA;AAJK,GAAP;AAMD,CA5CD;;AA6CA,eAAeN,OAAf","sourcesContent":["import {useState, useEffect} from 'react';\n\n\nconst useForm = (callback,initialState,validate) => {\n  const [values, setValues] = useState(initialState);\n  // new state for errors\n  // function that validates these errors\n  // pass these errors back to form\n  const [errors, setErrors] = useState(initialState);\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n\n  const handleChange = event => {\n    const {name, value} = event.target;\n    setValues(\n    {...values,\n     [name] : value\n    });\n    // console.log(name+':'+value)\n  }\n  \n  \n  const handleSubmit = event => {\n    event.preventDefault();\n    //handling errors\n    setErrors(validate(values))\n    setIsSubmitting(true)\n  };\n\n  useEffect(() => {\n    // callback function will happen whenever smt. in our changes\n    // check the see if there are no errors\n    // call our callback\n    if(Object.keys(errors).length === 0 && isSubmitting){\n      callback();\n    }\n  },\n  [ // observer: you can only change when X changes\n    errors\n  ])\n\n  return {\n    handleSubmit,\n    handleChange,\n    values,\n    errors\n  };\n}\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}